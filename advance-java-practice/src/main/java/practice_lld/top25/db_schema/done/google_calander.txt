google calendar for LLD. Classes, DB schema and api's for it
time : 2 hr

https://www.geeksforgeeks.org/system-design-design-google-calendar/

H4rry@@495452

Requirements of the System:
Functional Requirements:
Book an event: In a calendar, we are able to add an event with other people. It can be a single user or multiple users.
Check availability of users: While we are scheduling an event before that if we can figure out in that particular time the person is available or not.
Invite users to the meeting/event: The user should be able to invite other users to the meeting or event. The number of users invited for a scheduled meeting can be one or more than one.
Request RSVP: Before posting an invite to the person we want to know if that particular user is already blocked or if he is available. So these types of responses can be handled by requesting RSVP.
Meeting Reminders: Getting a notification before the time for a particular meeting with a particular person about the agenda and all those details would help prepare for the meeting beforehand.
Modify the meeting /event: This includes making changes to an existing meeting or event that you have created or have been invited to.
Cancel a meeting/event: This includes deleting or removing a meeting or event that you have created or have been invited to.
Lookup for all meetings in the calendar: This includes viewing a list of all events that have been designated as meetings or events.
View Calendar: This allows the user to see their scheduled events and appointments in a visual format which can be a monthly, weekly, or daily view, and it includes details such as the date, time, location, and description of each event.

--------

Entity : User, Calender, Event, eventReminder, event_invitation, event_recurrence

@Users
    user_id (PK)
    name
    email
    phone
    createdAt
------------

@Calenders
    calender_id (PK)
    user_id
    name
    description
    timezone
    created_at
    updated_at
------------------
@Events
    event_id (PK)
    calender_id
    title
    description
    location
    meeting_link
    start_time
    end_time
    status ('ACTIVE', 'CANCELED')
    created_by
    created_at
    updated_at
------------------

@Event_Attendees
    event_id
    user_id
    status ('Accepted','MayBe','Decline')
    is_organizer
    KEY(event_id, user_id)
    updated_at
-----------------------

@Availability
    event_id
    user_id
    start_time
    end_time
    status
    KEY(user_id, start_time, end_time)

----------------------------------
@Event_Reminders
    event_id
    reminder_at
    message
    reminder_type('Email','SMS','Push')
    created_at
---------...........................

@Event_Recurring_Patterns
    event_id (pk)
    type('Daily', 'Weekly')
    interval (every 2 days, 2 weeks)
    day_of_week
    week_of_month
    end_date
    created_at
    updated_at
------------------

@Event_Instances
    id
    event_id
    start_time
    end_time
    status
    is_canceled
    created_at
    updated_at
-----------

Queries :
Availability check
    select count(*) as busyCount
    from Availability
    where start_time < '11:00'
    and end_time > '10:00'

---Calender view query--

-- Query for non-recurring events

SELECT E.id, E.title, E.start_time AS instance_start_time, E.end_time AS instance_end_time, E.location, E.status
FROM Events E
JOIN Event_Attendees EA ON E.id = EA.event_id
WHERE EA.user_id = 'user_uuid'
  AND E.is_recurring = FALSE -- Only non-recurring events
  AND E.start_time BETWEEN '2024-09-01' AND '2024-09-30'
  AND E.status != 'Canceled'

UNION

-- Query for recurring event instances
SELECT EI.id, E.title, EI.instance_start_time, EI.instance_end_time, E.location, E.status
FROM Event_Instances EI
JOIN Events E ON EI.event_id = E.id
JOIN Event_Attendees EA ON E.id = EA.event_id
WHERE EA.user_id = 'user_uuid'
  AND EI.instance_start_time BETWEEN '2024-09-01' AND '2024-09-30'
  AND EI.is_canceled = FALSE
ORDER BY EI.instance_start_time;






























